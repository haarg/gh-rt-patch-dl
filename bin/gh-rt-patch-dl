#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long qw(:config gnu_getopt);
use Pod::Usage;
use JSON::PP qw(decode_json);
use HTTP::Tiny;

GetOptions(
  'h|help'  => \my $help,
  'rt'      => \my $rt,
  'gh'      => \my $gh,
  'token'   => \(my $token = $ENV{GITHUB_OAUTH_TOKEN}),
) or Pod::Usage::pod2usage(1);

if ($help) {
  Pod::Usage::pod2usage(
    -exitval => 0,
    -verbose => 2,
  );
}

if ($rt && $gh) {
  die "--rt and --gh options are not compatible";
}

$gh = 1
  if !$rt;

my $rt_ua = HTTP::Tiny->new(max_redirect => 0, timeout => 10);
my @issues;
for my $arg (@ARGV) {
  if (
    $arg =~ m{\Ahttps?://rt\.perl\.org/.*\.html\?id=([0-9]+)(?:;|&|\z)}
    or $arg =~ /\Art#?([0-9]+)\z/i
    or $rt && $arg =~ /\A#?([0-9]+)\z/
  ) {
    my $res = $rt_ua->get("https://rt.perl.org/Public/Bug/Display.html?id=$1");
    if (my $loc = $res->{headers}{location}) {
      if ($loc =~ m{\Ahttps?://github\.com/Perl/perl/issues/([0-9]+)\z}i) {
        push @issues, $1;
        next;
      }
    }
    warn "Unable to find GitHub issue for $arg\n";
  }
  elsif (
    $arg =~ /\Agh#?([0-9]+)\z/i
    or $arg =~ m{\Ahttps://github\.com/Perl/perl5/issues/(\d+)\z}i
    or $gh && $arg =~ /\A#?([0-9])\z/
  ) {
    push @issues, $1;
  }
  else {
    die "$arg does not look like an issue\n";
  }
}

my $ua = HTTP::Tiny->new;
sub gh_req {
  my $url = shift;
  my $res = $ua->get("https://api.github.com/$url", {
    headers => {
      (defined $token ? (
        'Authorization' => "token $token",
      ) : ()),
    },
  });
  if (!$res->{success}) {
    if ($res->{status} == 403) {
      die "Hit GitHub rate limit! Try again providing a GitHub login token!\n";
    }
    die "Error querying GitHub:\n$res->{content}";
  }
  return decode_json($res->{content});
}

for my $issue (@issues) {
  print "Issue $issue: https://github.com/Perl/perl5/issues/$issue\n";
  my $comments_res = $ua->get("https://api.github.com/repos/Perl/perl5/issues/$issue/comments");
  if (!$comments_res->{success}) {
    if ($comments_res->{status} == 403) {
      die "Rate limited :(\n";
    }
    warn "Can't find GitHub issue $issue!\n";
    next;
  }
  my $comments_data = decode_json($comments_res->{content});
  for my $comment (@$comments_data) {
    my $comment_res = $ua->get($comment->{url});
    if (!$comment_res->{success}) {
      warn "Can't read GitHub issue $issue comment $comment->{id}!\n";
      next;
    }
    my $comment_data = decode_json($comment_res->{content});
    my $body = $comment_data->{body};
    while ($body =~ m{
      <details><summary>([^<]+)</summary>\n
      \n
      ```diff\n
      (.+?)
      ```\n
      </details>\n
    }sgx) {
      my ($file, $patch) = ($1, $2);
      print "    Patch: $file\n";
      $file =~ s{/}{-}g;
      my $write_file = $file;
      my $post = 0;
      while (-e $write_file) {
        $write_file = $file . '.' . ++$post;
      }
      print "    Writing $write_file\n";
      open my $fh, '>:utf8', $write_file
        or die "Can't write to $write_file: $!\n";
      print $fh $patch;
      close $fh;
    }
  }
}

__END__

=head1 NAME

gh-rt-patch-dl - Download patches migrated from Perl RT to GitHub

=head1 SYNOPSIS

  $ gh-rt-patch-dl 17006
  $ gh-rt-patch-dl https://github.com/Perl/perl5/issues/17006
  $ gh-rt-patch-dl gh#17006

  $ gh-rt-patch-dl --rt 134118
  $ gh-rt-patch-dl rt#134118
  $ gh-rt-patch-dl https://rt.perl.org/Public/Bug/Display.html?id=

=head1 RATE LIMITING

GitHub rate limits API requests.  This script may make enough requests to go
over the rate limit.  If this is an issue, a login token can be provided, as
logged in users have significantly higher limits.

The token can be provided using the C<--token=> option or the 
C<GITHUB_OAUTH_TOKEN> environment variable.  Tokens can be created at
L<https://github.com/settings/tokens>.

=cut
